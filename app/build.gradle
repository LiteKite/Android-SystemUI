/*
 * Copyright 2021 LiteKite Startup. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'dagger.hilt.android.plugin'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.litekite.systemui"
        minSdkVersion 28
        //noinspection OldTargetApi
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        renderscriptTargetApi 30
        renderscriptSupportModeEnabled true
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
    }
    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    buildFeatures {
        viewBinding = true
        dataBinding = true
    }
    lintOptions {
        baseline file("lint-baseline.xml")
        warningsAsErrors true
        enable "Interoperability"
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

kapt {
    correctErrorTypes true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'], exclude: [])
    implementation fileTree(dir: 'system_libs', include: ['*.aar', '*.jar'], exclude: [])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2'
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation "androidx.datastore:datastore-preferences:1.0.0-beta01"
    implementation 'com.google.android.material:material:1.3.0'

    // Widgets library
    implementation 'com.github.litekite:android-widgets:0.0.7'

    // Activity & Fragments KTX
    implementation "androidx.activity:activity-ktx:1.2.3"
    implementation "androidx.fragment:fragment-ktx:1.3.4"

    // Lifecycle KTX
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    kapt "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    // Test helpers for Core library
    androidTestImplementation 'androidx.test:core-ktx:1.3.0'

    // Test helpers for Room
    testImplementation "androidx.room:room-testing:$room_version"

    // Hilt - Instrumentation test helpers
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    // Hilt - Local unit test helpers
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    // JUnit
    testImplementation 'junit:junit:4.13.2'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'

    // Assertions
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.2'
    androidTestImplementation 'androidx.test.ext:truth:1.3.0'

    // Espresso dependencies
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

task deploy(dependsOn: [clean, assemble]) {

    group = 'install'

    description = 'Cleans, assembles and deploys apk into target'

    assemble.mustRunAfter clean

    doLast {
        def appName = "CarSystemUI"

        def releaseApkDir = "$projectDir/build/outputs/apk/release/"

        def targetDir = "/system/product/priv-app/${appName}"

        exec {
            commandLine "adb", "root"
        }

        exec {
            commandLine "adb", "remount"
        }

        file("${releaseApkDir}app-release.apk").renameTo("${releaseApkDir}${appName}.apk")

        if (!file("${releaseApkDir}${appName}.apk").exists()) {
            println("Renamed target apk not found!...")
            return
        }

        exec {
            commandLine "adb", "push", "${releaseApkDir}${appName}.apk", targetDir
        }

        exec {
            commandLine "adb", "reboot"
        }
    }

}
